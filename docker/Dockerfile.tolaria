# Dockerfile for Tolaria Training Orchestrator
FROM python:3.12-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    g++ \
    gcc \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy project files
COPY pyproject.toml README.md ./
COPY src/ ./src/

# Install the package first
RUN pip install --no-cache-dir -e .

# Install torch-scatter manually after PyTorch is installed
RUN pip install --no-cache-dir torch-scatter -f https://data.pyg.org/whl/torch-2.7.0+cpu.html || \
    echo "Warning: torch-scatter installation failed, using fallback mode"

# Production image
FROM python:3.12-slim

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy installed packages from builder
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /build /app

WORKDIR /app

# Create non-root user and directories in one layer
RUN useradd -m -u 1000 esper && \
    mkdir -p /app/configs /app/checkpoints /app/logs && \
    chown -R esper:esper /app

USER esper

# Environment variables
ENV PYTHONPATH=/app:$PYTHONPATH
ENV PYTHONUNBUFFERED=1
ENV SERVICE_NAME=tolaria

# Expose metrics port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command
CMD ["python", "-m", "esper.services.tolaria.main", "--config", "/app/configs/tolaria.yaml"]