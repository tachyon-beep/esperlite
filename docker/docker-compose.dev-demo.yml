version: '3.8'

# Development-as-Production configuration for tech demo
# This configuration mimics production setup but optimized for demo environment

services:
  # Infrastructure Services with Production-like Configuration
  postgres:
    image: postgres:16-alpine
    container_name: esper-demo-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Production-like settings
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    volumes:
      - postgres_demo_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "0.0.0.0:5432:5432"
    networks:
      - esper-demo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: esper-demo-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --protected-mode yes
      --tcp-backlog 511
      --timeout 0
      --tcp-keepalive 300
      --supervised no
      --databases 16
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_demo_data:/data
    ports:
      - "0.0.0.0:6379:6379"
    networks:
      - esper-demo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: esper-demo-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      # Production-like settings
      MINIO_STORAGE_CLASS_STANDARD: "EC:2"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    volumes:
      - minio_demo_data:/data
    ports:
      - "0.0.0.0:9000:9000"
      - "0.0.0.0:9001:9001"
    networks:
      - esper-demo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # MinIO initialization container
  minio-init:
    image: minio/mc:latest
    container_name: esper-demo-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb -p minio/esper-artifacts;
      /usr/bin/mc mb -p minio/esper-checkpoints;
      /usr/bin/mc mb -p minio/esper-models;
      /usr/bin/mc policy set public minio/esper-artifacts;
      echo 'MinIO buckets created successfully';
      "
    networks:
      - esper-demo-network

  # Esper Services - Built locally for demo
  urza:
    build:
      context: ..
      dockerfile: docker/Dockerfile.urza
    container_name: esper-demo-urza
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      S3_SECRET_KEY: ${MINIO_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      API_KEY: ${URZA_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL}
      ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "0.0.0.0:8000:8000"
    networks:
      - esper-demo-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    restart: unless-stopped
    labels:
      - "com.esper.service=urza"
      - "com.esper.environment=demo"

  tamiyo:
    build:
      context: ..
      dockerfile: docker/Dockerfile.tamiyo
    container_name: esper-demo-tamiyo
    environment:
      URZA_URL: ${URZA_URL}
      REDIS_URL: ${REDIS_URL}
      API_KEY: ${TAMIYO_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL}
      DEVICE: ${DEVICE}
      MODEL_CACHE_DIR: /app/models
      ENVIRONMENT: ${ENVIRONMENT}
      # Demo-specific settings
      ENABLE_PROFILING: ${ENABLE_PROFILING}
      SAFETY_CHECKS_ENABLED: ${SAFETY_CHECKS_ENABLED}
    volumes:
      - tamiyo_demo_models:/app/models
      - tamiyo_demo_logs:/app/logs
    ports:
      - "0.0.0.0:8001:8001"
    networks:
      - esper-demo-network
    depends_on:
      - urza
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
    labels:
      - "com.esper.service=tamiyo"
      - "com.esper.environment=demo"

  tolaria:
    build:
      context: ..
      dockerfile: docker/Dockerfile.tolaria
    container_name: esper-demo-tolaria
    environment:
      URZA_URL: ${URZA_URL}
      TAMIYO_URL: ${TAMIYO_URL}
      REDIS_URL: ${REDIS_URL}
      API_KEY: ${TOLARIA_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL}
      DEVICE: ${DEVICE}
      ENVIRONMENT: ${ENVIRONMENT}
    volumes:
      - ../configs/demo:/app/configs:ro
      - tolaria_demo_checkpoints:/app/checkpoints
      - tolaria_demo_logs:/app/logs
      - ../data:/app/data:ro  # For demo datasets
    ports:
      - "0.0.0.0:8080:8080"
    networks:
      - esper-demo-network
    depends_on:
      - tamiyo
      - urza
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'
    labels:
      - "com.esper.service=tolaria"
      - "com.esper.environment=demo"

  # Monitoring Stack for Demo
  prometheus:
    image: prom/prometheus:latest
    container_name: esper-demo-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_demo_data:/prometheus
    ports:
      - "0.0.0.0:9090:9090"
    networks:
      - esper-demo-network
    restart: unless-stopped
    labels:
      - "com.esper.service=prometheus"
      - "com.esper.environment=demo"

  grafana:
    image: grafana/grafana:latest
    container_name: esper-demo-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_SMTP_ENABLED: false
      # Demo mode settings
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/esper-overview.json
    volumes:
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_demo_data:/var/lib/grafana
    ports:
      - "0.0.0.0:3000:3000"
    networks:
      - esper-demo-network
    depends_on:
      - prometheus
    restart: unless-stopped
    labels:
      - "com.esper.service=grafana"
      - "com.esper.environment=demo"

  # Nginx reverse proxy for demo
  nginx:
    image: nginx:alpine
    container_name: esper-demo-nginx
    volumes:
      - ./nginx/demo.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    ports:
      - "0.0.0.0:80:80"
    networks:
      - esper-demo-network
    depends_on:
      - tolaria
      - tamiyo
      - urza
      - grafana
    restart: unless-stopped
    labels:
      - "com.esper.service=nginx"
      - "com.esper.environment=demo"

networks:
  esper-demo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_demo_data:
  redis_demo_data:
  minio_demo_data:
  tamiyo_demo_models:
  tamiyo_demo_logs:
  tolaria_demo_checkpoints:
  tolaria_demo_logs:
  prometheus_demo_data:
  grafana_demo_data: