version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:16-alpine
    container_name: esper-postgres
    environment:
      POSTGRES_DB: urza
      POSTGRES_USER: esper
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-esper_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - esper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U esper"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: esper-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-esper_redis_password}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - esper-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: esper-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-esper}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-esper_minio_password}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - esper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Esper Services
  urza:
    build:
      context: ..
      dockerfile: docker/Dockerfile.urza
    container_name: esper-urza
    environment:
      DATABASE_URL: postgresql://esper:${POSTGRES_PASSWORD:-esper_secure_password}@postgres:5432/urza
      REDIS_URL: redis://:${REDIS_PASSWORD:-esper_redis_password}@redis:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-esper}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-esper_minio_password}
      S3_BUCKET: esper-artifacts
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    networks:
      - esper-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  tamiyo:
    build:
      context: ..
      dockerfile: docker/Dockerfile.tamiyo
    container_name: esper-tamiyo
    environment:
      URZA_URL: http://urza:8000
      REDIS_URL: redis://:${REDIS_PASSWORD:-esper_redis_password}@redis:6379/0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEVICE: ${DEVICE:-cpu}  # or cuda if GPU available
      MODEL_CACHE_DIR: /app/models
    volumes:
      - tamiyo_models:/app/models
      - tamiyo_logs:/app/logs
    ports:
      - "8001:8001"
    networks:
      - esper-network
    depends_on:
      - urza
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  tolaria:
    build:
      context: ..
      dockerfile: docker/Dockerfile.tolaria
    container_name: esper-tolaria
    environment:
      URZA_URL: http://urza:8000
      TAMIYO_URL: http://tamiyo:8001
      REDIS_URL: redis://:${REDIS_PASSWORD:-esper_redis_password}@redis:6379/0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEVICE: ${DEVICE:-cpu}
    volumes:
      - ./configs:/app/configs:ro
      - tolaria_checkpoints:/app/checkpoints
      - tolaria_logs:/app/logs
    ports:
      - "8080:8080"
    networks:
      - esper-network
    depends_on:
      - tamiyo
      - urza
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: esper-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - esper-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"  # nobody user

  grafana:
    image: grafana/grafana:latest
    container_name: esper-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - esper-network
    depends_on:
      - prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "472:472"  # grafana user

networks:
  esper-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  tamiyo_models:
  tamiyo_logs:
  tolaria_checkpoints:
  tolaria_logs:
  prometheus_data:
  grafana_data: