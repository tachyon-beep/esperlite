apiVersion: v1
kind: Service
metadata:
  name: tamiyo-service
  namespace: esper
  labels:
    app.kubernetes.io/name: tamiyo
    app.kubernetes.io/component: strategic-controller
    app.kubernetes.io/part-of: esper-platform
spec:
  ports:
    - port: 8001
      targetPort: 8001
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: tamiyo
    app.kubernetes.io/component: strategic-controller
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tamiyo
  namespace: esper
  labels:
    app.kubernetes.io/name: tamiyo
    app.kubernetes.io/component: strategic-controller
    app.kubernetes.io/part-of: esper-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: tamiyo
      app.kubernetes.io/component: strategic-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tamiyo
        app.kubernetes.io/component: strategic-controller
        app.kubernetes.io/part-of: esper-platform
    spec:
      containers:
      - name: tamiyo
        image: esper/tamiyo:latest
        imagePullPolicy: Always
        command: ["python", "-m", "esper.services.tamiyo.autonomous_service", "--port", "8001"]
        env:
        - name: URZA_URL
          valueFrom:
            configMapKeyRef:
              name: esper-config
              key: URZA_URL
        - name: REDIS_URL
          value: redis://:$(REDIS_PASSWORD)@redis-service:6379/0
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: esper-secrets
              key: redis-password
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: esper-config
              key: LOG_LEVEL
        - name: DEVICE
          valueFrom:
            configMapKeyRef:
              name: esper-config
              key: DEVICE
        - name: MODEL_CACHE_DIR
          value: "/app/models"
        - name: TORCH_HOME
          value: "/app/models"
        ports:
        - containerPort: 8001
          name: http
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: model-cache
          mountPath: /app/models
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: model-cache
        emptyDir:
          sizeLimit: 10Gi
      - name: logs
        emptyDir:
          sizeLimit: 1Gi